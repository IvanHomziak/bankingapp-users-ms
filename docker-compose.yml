version: '3.1'

services:
  # DB for bankingapp-users-ms-app
  mysqldb-users-c:
    container_name: mysqldb-users-c
    image: mysql
    restart: always
    environment:
      MYSQL_DATABASE: users_db
      MYSQL_USER: clientuser
      MYSQL_PASSWORD: clientpassword
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: admin1234
    ports:
      - "3309:3306"
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    volumes:
      - ./mysql-init/usersdb.sql:/docker-entrypoint-initdb.d/usersdb.sql # path to script which should create database
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-padmin1234" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # DB for bankingapp-client-account-ms
  mysqldb-cms-c:
    container_name: mysqldb-cms-c
    image: mysql
    restart: always
    environment:
      MYSQL_DATABASE: clients_db
      MYSQL_USER: clientuser
      MYSQL_PASSWORD: clientpassword
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: admin1234
    ports:
      - "3307:3306"
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    volumes:
      - ./mysql-init/cams.sql:/docker-entrypoint-initdb.d/cams.sql # path to script which should create database
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-padmin1234" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # DB for bankingapp-transaction-ms
  mysql-tms-c:
    container_name: mysql-tms-c
    image: mysql
    environment:
      MYSQL_DATABASE: transactiondatabase
      MYSQL_USER: newuser
      MYSQL_PASSWORD: password
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: admin1234
    ports:
      - "3308:3306"
    volumes:
      #      - mysql_data:/var/lib/mysql  # Persist MySQL data
      - ./mysql-init/tms.sql:/docker-entrypoint-initdb.d/tms.sql  # Custom SQL scripts directory
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-padmin1234" ]
      interval: 30s
      timeout: 10s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - bankingapp-network

  bankingapp-api-config-server:
    image: ihomziak/bankingapp-api-config-server:latest
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    depends_on:
      - rabbitmq

  bankingapp-discovery-service:
    image: ihomziak/bankingapp-discovery-service:latest
    container_name: discovery-service
    ports:
      - "8010:8010"
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
#    depends_on:
#      - bankingapp-api-config-server

  bankingapp-cloud-api-gateway:
    image: ihomziak/bankingapp-cloud-api-gateway:latest
    container_name: cloud-api-gateway
    ports:
      - "8082:8082"
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8010/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    depends_on:
      - bankingapp-discovery-service

  bankingapp-users-ms-app:
    image: ihomziak/bankingapp-users-ms:latest
    container_name: users-ms
    ports:
      - "8083:8083"
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8010/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
    depends_on:
      - mysqldb-users-c
      - bankingapp-discovery-service
      - bankingapp-cloud-api-gateway
      - elasticsearch
      - logstash
      - kibana

  bankingapp-client-account-ms:
    image: ihomziak/bankingapp-client-account-ms:latest
    container_name: client-account-ms
    ports:
      - "8084:8084"
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8010/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      DB_HOST: mysqldb-cms-c
      DB_NAME: clients_db
      DB_USER: root
      DB_PASS: admin1234
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: broker:9092
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: broker:9092
    depends_on:
      - mysqldb-cms-c
      - bankingapp-discovery-service
      - bankingapp-cloud-api-gateway
      - broker

  bankingapp-transaction-ms:
    image: ihomziak/bankingapp-transaction-ms:latest
    container_name: transaction-ms
    ports:
      - "8085:8085"
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8010/eureka/
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      DB_HOST: mysql-tms-c
      DB_NAME: transactiondatabase
      DB_USER: root
      DB_PASS: admin1234
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: broker:9092
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: broker:9092
    depends_on:
      - mysql-tms-c
      - bankingapp-discovery-service
      - bankingapp-cloud-api-gateway
      - broker

  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./data/prometheus/config:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    ports:
      - "9090:9090"
  #      links:
  #        - node-exporter:node-exporter

  #  node-exporter:
  #    image: prom/node-exporter:latest
  #    network_mode: host
  #    container_name: monitoring_node_exporter
  #    restart: unless-stopped
  #    expose:
  #      - 9100

  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    restart: unless-stopped
    user: root
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network
    ports:
      - 3000:3000 # access grafana url
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      #      - GF_SERVER_DOMAIN=localhost
      # Enabled for logging
      - GF_LOG_MODE=console file
      - GF_LOG_FILTERS=alerting.notifier.slack:debug alertmanager:debug ngalert:debug

      #  alertmanager:
      #    image: prom/alertmanager:v0.25.0
      #    ports:
      #      - "9093:9093"
      #    volumes:
      #      - ./alert-manager/tmp:/data
      #      - ./alert-manager/config:/config
      #    command: --config.file=/config/alertmanager.yml --log.level=debug

  # ZooKeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - bankingapp-network  # ðŸ”¹ Connect to global network

  # Kafka Broker
  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_ADVERTISED_HOST_NAME: broker
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      GROUP_ID: "transaction-group"
      KAFKA_CREATE_TOPICS: "transfer-transactions-topic"
    depends_on:
      - zookeeper
    networks:
      - bankingapp-network

  #  # Redis Master (for Sentinel)
  #  redis-master:
  #    container_name: redis-master
  #    image: 'bitnami/redis:latest'
  #    environment:
  #      - REDIS_REPLICATION_MODE=master
  #      - REDIS_PASSWORD=redispassword
  #    ports:
  #      - "6379:6379"
  #    networks:
  #      - bankingapp-network
  #
  #  # Redis Slave
  #  redis-slave:
  #    container_name: slave-redis
  #    image: bitnami/redis:latest
  #    environment:
  #      - REDIS_REPLICATION_MODE=slave
  #      - REDIS_MASTER_HOST=redis-master
  #      - REDIS_MASTER_PASSWORD=redispassword
  #      - REDIS_PASSWORD=redispassword
  #    ports:
  #      - "7001:6379"
  #    networks:
  #      - bankingapp-network
  #    depends_on:
  #      - redis-master
  #
  #  # Redis Sentinel Instances
  #  redis-sentinel-1:
  #    image: bitnami/redis-sentinel:latest
  #    container_name: sentinel-1
  #    environment:
  #      - REDIS_MASTER_SET=mymaster
  #      - REDIS_MASTER_HOST=redis-master
  #      - REDIS_MASTER_PASSWORD=redispassword
  #      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
  #    ports:
  #      - "26379:26379"
  #    networks:
  #      - bankingapp-network
  #    depends_on:
  #      - redis-master
  #      - redis-slave
  #
  #  redis-sentinel-2:
  #    image: bitnami/redis-sentinel:latest
  #    container_name: sentinel-2
  #    environment:
  #      - REDIS_MASTER_SET=mymaster
  #      - REDIS_MASTER_HOST=redis-master
  #      - REDIS_MASTER_PASSWORD=redispassword
  #      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
  #    ports:
  #      - "26380:26379"
  #    networks:
  #      - bankingapp-network
  #    depends_on:
  #      - redis-master
  #      - redis-slave
  #
  #  redis-sentinel-3:
  #    image: bitnami/redis-sentinel:latest
  #    container_name: sentinel-3
  #    environment:
  #      - REDIS_MASTER_SET=mymaster
  #      - REDIS_MASTER_HOST=redis-master
  #      - REDIS_MASTER_PASSWORD=redispassword
  #      - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=10000
  #    ports:
  #      - "26381:26379"
  #    networks:
  #      - bankingapp-network
  #    depends_on:
  #      - redis-master
  #      - redis-slave


  elasticsearch:
    container_name: library_elasticsearch
    image: elasticsearch:7.17.27
    volumes:
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      discovery.type: single-node
    networks:
      - bankingapp-network

  logstash:
    container_name: library_logstash
    image: logstash:7.17.27
    volumes:
      - type: bind
        source: .logstash
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5001:5001/tcp"
      - "5001:5001/udp"
      - "9600:9600"
      - "4560:4560"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - bankingapp-network
    depends_on:
      - elasticsearch

  kibana:
    container_name: library_kibana
    image: kibana:7.17.27
    ports:
      - "5601:5601"
    networks:
      - bankingapp-network
    depends_on:
      - elasticsearch



networks:
  bankingapp-network:
    driver: bridge  # Connect to global network
  elk-network:
    driver: bridge
  elk:
    driver: bridge

volumes:
  elasticsearch:
  elastic_data: { }